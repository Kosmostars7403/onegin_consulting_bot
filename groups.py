import json
import logging
import os

from telegram import Update
from telegram.ext import CallbackContext

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                     level=logging.INFO)

JSON_FILE = "groups.json"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏
def extract_telegram_id(url: str):
    try:
        parts = url.split("/#")
        if len(parts) > 1 and parts[1].startswith("-"):
            return int(parts[1])
    except Exception:
        pass
    return None

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
def load_groups():
    if os.path.exists(JSON_FILE):
        with open(JSON_FILE, "r", encoding="utf-8") as f:
            return json.load(f)

    return []


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
def save_groups(groups):
    with open(JSON_FILE, "w", encoding="utf-8") as f:
        json.dump(groups, f, indent=4)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ JSON
def add_group(chat_id):
    groups = load_groups()
    if chat_id not in groups:
        groups.append(chat_id)
        save_groups(groups)
        logging.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        logging.info(f"‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ {chat_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")


# –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
def remove_group(chat_id):
    groups = load_groups()
    if chat_id in groups:
        groups.remove(chat_id)
        save_groups(groups)
        logging.info(f"‚ùå –ì—Ä—É–ø–ø–∞ {chat_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –≤ JSON
def update_group_id(old_chat_id, new_chat_id):
    groups = load_groups()

    if old_chat_id in groups:
        groups.remove(old_chat_id)
        groups.append(new_chat_id)
        save_groups(groups)
        logging.info(f"‚úÖ –û–±–Ω–æ–≤–∏–ª–∏ ID –≥—Ä—É–ø–ø—ã: {old_chat_id} ‚Üí {new_chat_id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "–±–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ"
def bot_joined(update: Update, context: CallbackContext):
    new_members = update.message.new_chat_members
    chat = update.message.chat

    for member in new_members:
        if member.is_bot and member.id == context.bot.id:
            add_group(chat.id)
            break

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "–±–æ—Ç –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É"
def bot_left(update: Update, context: CallbackContext):
    left_member = update.message.left_chat_member
    chat = update.message.chat

    if left_member and left_member.is_bot and left_member.id == context.bot.id:
        remove_group(chat.id)

# –ú–∏–≥—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã (–∏–∑ –æ–±—ã—á–Ω–æ–π –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É)
def handle_migration(update: Update, context: CallbackContext):
    if update.message.migrate_to_chat_id:
        old_chat_id = update.message.chat_id
        new_chat_id = update.message.migrate_to_chat_id

        logging.info(f"üîÑ –ì—Ä—É–ø–ø–∞ {old_chat_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É {new_chat_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –∏–ª–∏ JSON
        update_group_id(old_chat_id, new_chat_id)
